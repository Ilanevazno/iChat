const express = require('express');
const app = express();
const debug = require('debug')('chat-server:server');
const http = require('http');
const cors = require('cors');
const shortid = require('shortid');
const bodyParser = require("body-parser");

app.use(cors());
app.use(bodyParser.json());

const urlencodedParser = bodyParser.urlencoded({ extended: false });

var port = normalizePort(process.env.PORT || '3010');
app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const options = { /* ... */ };

let rooms = {

};

app.post('/users', urlencodedParser, (req, res) => {
  let { userName, roomId } = req.body;

  // Если нет id комнаты, генерируем
  if (roomId === '') {
    roomId = shortid.generate()
  } else {
    // проверяем наличие дублирующего имени пользователя в комнате
    const isFoundedSomeUser = rooms[roomId] ? !!rooms[roomId].filter(user => user.userName === userName).length : false;

    console.log(rooms[roomId], 'username =>', userName);

    if (isFoundedSomeUser) return res.send({
      type: 'error',
      message: 'Пользователь уже существует в комнате',
    });
  };

  rooms[roomId] ? rooms[roomId].push({ userName }) : rooms[roomId] = [{ userName }];

  res.send({
    type: 'success',
  });

  console.log('ready', rooms);
});

const io = require('socket.io')(server, options);

io.on('connection', socket => {
  socket.on('join-room', id => {
    socket.join(id);
    console.log('connected', id);
  });

  socket.on('new-message', (message) => {
  //socket.broadcast.emit('chat-message', message);

  io.to(message.roomId).emit('chat-message', message);

    console.log('Сообщение', message);
  })
  // const roomId = shortid.generate();
  // socket.join(roomId);

  // socket.on('new-user', (name) => {
  //   rooms[roomId] ? rooms[roomId].push({ name }) : rooms[roomId] = [{ name }];

  //   console.log('1');

  //   socket.broadcast.emit('new-user-response', { isConnected: true, roomId });
  // })

  // socket.on('request-room-id', () => {
  //   socket.broadcast.emit('response-room-id', {
  //     message: `You joined with room id ${roomId}`,
  //     roomId,
  //   });
  // })

  // socket.on('new-message', (message) => {
  //   socket.broadcast.emit('chat-message', message);
  // })
});

// server.listen(3000);